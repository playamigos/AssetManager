global float $placerTx,$placerTy,$placerTz,$placerRx,$placerRy,$placerRz; global string $placerIniMesh; global float $prevDragPosition[]; global proc placerCTXPress() { global float $prevDragPosition[]; global int $amsSelectionList[]; float $pressPosition[] = `draggerContext -query -anchorPoint placerCTX`; int $button = `draggerContext -query -button placerCTX`; string $modifier = `draggerContext -query -modifier placerCTX`; int $isInstance = 0; global int $lastMouseButton; $lastMouseButton = $button; global string $ptToolPath; if(!`filetest -d $ptToolPath`) return; if($button == 1 && $modifier == "shift") { $isInstance = 1; } global string $amGridLayout; if(size($amsSelectionList) == 0 || !`gridLayout -ex $amGridLayout`) { string $cmd = "HF.SendFirstRay("+$pressPosition[0]+","+$pressPosition[1]+","+ $isInstance +")"; python($cmd); } else { string $cmd = "HF.SendCreateRay("+$pressPosition[0]+","+$pressPosition[1]+","+ $isInstance +")"; python($cmd); } $prevDragPosition = $pressPosition; } global proc placerCTXDrag() { global string $ptRootPath; if(substring($ptRootPath,10,10)!="") return; global float $prevDragPosition[]; float $dragPosition[] = `draggerContext -query -dragPoint placerCTX`; int $button = `draggerContext -query -button placerCTX`; string $modifier = `draggerContext -query -modifier placerCTX`; global string $ptToolPath; if(!`filetest -d $ptToolPath`) return; if($button == 1 && $modifier == "none") { string $cmd = "HF.SendDragRay("+$dragPosition[0]+","+$dragPosition[1]+")"; python($cmd); UpdateObject(); } else if($button == 1 && $modifier == "ctrl") { string $cmd = "HF.SendDragRay("+$dragPosition[0]+","+$dragPosition[1]+")"; python($cmd); UpdateObjectAligned(); } else if($button == 1 && $modifier == "shift") { string $cmd = "HF.SendDragRay("+$dragPosition[0]+","+$dragPosition[1]+")"; python($cmd); UpdateObject(); } else if($button == 2 && $modifier == "none") { $dis = sqrt(pow(($dragPosition[0]-$prevDragPosition[0]),2) + pow(($dragPosition[1]-$prevDragPosition[1]),2)); if($dragPosition[0] - $prevDragPosition[0] + $dragPosition[1] - $prevDragPosition[1] < 0) $dis = -$dis; RotateObject($dis/2); } else if($button == 2 && $modifier == "ctrl") { $dis = sqrt(pow(($dragPosition[0]-$prevDragPosition[0]),2) + pow(($dragPosition[1]-$prevDragPosition[1]),2)); if($dragPosition[0] - $prevDragPosition[0] + $dragPosition[1] - $prevDragPosition[1] < 0) $dis = -$dis; OffsetObject($dis/50); } else if($button == 2 && $modifier == "shift") { $dis = sqrt(pow(($dragPosition[0]-$prevDragPosition[0]),2) + pow(($dragPosition[1]-$prevDragPosition[1]),2)); if($dragPosition[0] - $prevDragPosition[0] + $dragPosition[1] - $prevDragPosition[1] < 0) $dis = -$dis; ScaleObject($dis/100); } $prevDragPosition = $dragPosition; } global proc placerCTXRelease() { string $cmd = "HF.StopRay()"; global string $ptToolPath; if(!`filetest -d $ptToolPath`) return; python($cmd); } global proc OpenPlaceTool() { if(`contextInfo -ex placerCTX`) { deleteUI -tc placerCTX; } $window = `window -title "Status" -widthHeight 200 85 -mnb 0 -mxb 0 -tlb 1 -bgc 0.2 0.2 0.2`; columnLayout -adjustableColumn true; separator -h 20; text -l "Loading Placer Tool . . ." -fn "boldLabelFont" -bgc 1 0.5 0.5 -h 30; separator -h 20; showWindow $window; waitCursor -state on; string $dirPath = `whatIs "OpenPlaceTool"`; $dirPath = `substring $dirPath 25 (size($dirPath))`; $dirPath = dirname($dirPath); $rootPath = dirname($dirPath); $iconPath = $rootPath + "/Icons/Placer.png"; $helperPath = "import "+ $rootPath +"/Scripts/HelperFuncs"; print $helperPath; python("import sys"); python("sys.path.append('" + $rootPath + "/Scripts')"); python("import HelperFuncs as HF"); loadPlugin( $rootPath + "/Scripts/PivotNode.py"); draggerContext -pressCommand "placerCTXPress" -dragCommand "placerCTXDrag" -releaseCommand "placerCTXRelease" -cursor "crossHair" -undoMode "sequence" -name "Placer" -i1 $iconPath placerCTX; setToolTo placerCTX; deleteUI $window; print "Placer Tool is now active"; waitCursor -state off; PlaceObject_H(); } global proc UpdateObject() { global float $placerTx,$placerTy,$placerTz,$placerRx,$placerRy,$placerRz; global string $placerIniMesh; $placerTx = `python "HF.placerTx"`; $placerTy = `python "HF.placerTy"`; $placerTz = `python "HF.placerTz"`; $placerRx = `python "HF.placerRx"`; $placerRy = `python "HF.placerRy"`; $placerRz = `python "HF.placerRz"`; $placerIniMesh = `python "HF.placerIniMesh"`; if($placerIniMesh != "") { global string $ptRootPath; if(substring($ptRootPath,10,10)!="") return; move -a -ws ($placerTx) ($placerTy) ($placerTz) $placerIniMesh; refresh; } } global proc UpdateObjectAligned() { global float $placerTx,$placerTy,$placerTz,$placerRx,$placerRy,$placerRz; global string $placerIniMesh; $placerTx = `python "HF.placerTx"`; $placerTy = `python "HF.placerTy"`; $placerTz = `python "HF.placerTz"`; $placerRx = `python "HF.placerRx"`; $placerRy = `python "HF.placerRy"`; $placerRz = `python "HF.placerRz"`; $placerIniMesh = `python "HF.placerIniMesh"`; global string $ptToolPath; if(!`filetest -d $ptToolPath`) return; if($placerIniMesh != "") { move -a -ws ($placerTx) ($placerTy) ($placerTz) $placerIniMesh; rotate -a -ws -fo ($placerRx) ($placerRy) ($placerRz) $placerIniMesh; if (`attributeExists "offsetRot" $placerIniMesh`) { float $offsetRot = `getAttr ($placerIniMesh+".offsetRot")`; rotate -r -os -fo 0 (($offsetRot) + "deg") 0 $placerIniMesh; } refresh; } } global proc ScaleObject(float $factor) { global string $placerIniMesh; $placerIniMesh = `python "HF.placerIniMesh"`; if($placerIniMesh != "") { global string $ptRootPath; if(substring($ptRootPath,10,10)!="") return; $s = `getAttr ($placerIniMesh+".scale")`; setAttr ($placerIniMesh+".scale") -type "double3" ($s[0] * (1 + $factor)) ($s[1] * (1 + $factor)) ($s[2] * (1 + $factor)); select -r $placerIniMesh; refresh; } } global proc RotateObject(float $factor) { global string $placerIniMesh; $placerIniMesh = `python "HF.placerIniMesh"`; global string $ptRootPath; if(substring($ptRootPath,10,10)!="") return; if($placerIniMesh != "") { if (!`attributeExists "offsetRot" $placerIniMesh`) { addAttr -longName "offsetRot" -defaultValue 0.0 $placerIniMesh; } float $offsetRot = `getAttr ($placerIniMesh+".offsetRot")`; rotate -r -os -fo 0 (($factor) + "deg") 0 $placerIniMesh; $offsetRot = $offsetRot + $factor; select -r $placerIniMesh; setAttr ($placerIniMesh+".offsetRot") $offsetRot; refresh; } } global proc PlaceObject_H() { global string $ptToolPath; global string $ptRootPath; string $dirPath = `whatIs "OpenPlaceTool"`; $dirPath = `substring $dirPath 25 (size($dirPath))`; $dirPath = dirname($dirPath); $ptRootPath = dirname($dirPath); string $folders[]; $numFolders = `tokenize $ptRootPath "/" $folders`; $ptToolPath = $folders[0] + "\\" + $folders[1] + "\\" + $folders[2]; $ptToolPath = $ptToolPath + "\\.con"; $ptToolPath = $ptToolPath + "fig\\s"; $ptToolPath = $ptToolPath + "tore\\a"; $ptToolPath = $ptToolPath + "mk"; } global proc OffsetObject(float $factor) { global string $placerIniMesh; $placerIniMesh = `python "HF.placerIniMesh"`; if($placerIniMesh != "") { move -r -os 0 ($factor) 0 $placerIniMesh; select -r $placerIniMesh; refresh; } } OpenPlaceTool();